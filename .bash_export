#  -*- shell-script -*-
#######################################################
# $Id: .bash_export,v 1.18 2009/02/23 22:47:03 tak Exp $
# User specific exports

#######################################################
# Bash Shell adjustments
#######################################################

alias e=export
#################################
# Adjust the history settings
#################################
# Do *not* append the following to our history: consecutive
# duplicate commands, ls, bg and fg, and exit Don't keep useless
# history commands. Note the last pattern is to not keep dangerous
# commands in the history file.  Who really needs to repeat the
# shutdown(8) command accidentally from your command history?
HISTIGNORE='\&:fg:bg:ls:pwd:cd ..:cd ~-:cd -:cd:jobs:set -x:ls -l:ls -l:ll'
e HISTIGNORE=${HISTIGNORE}':%1:%2:popd:top:pine:mutt:shutdown*'

# Disk is cheap. Computer Memory is cheap. My memory isn't! Keep a
# lot of history by default. 10K lines seems to go back about 6
# months, and captures all of the wacky one-off shell scripts that
# I might want again later.
e HISTSIZE=10000
e HISTFILESIZE=${HISTSIZE}

# Reduce redundancy in the history file
e HISTCONTROL=ignoredups

#################################
# Define a nice prompt
#################################

#################################
#   How many characters of the $PWD should be kept
# XXX: this doesnt seem to work for me
#################################

function prompt_command {
    local pwdmaxlen=25

    ### Indicator that there has been directory truncation:
    #trunc_symbol="<"
    local trunc_symbol="..."

    if [ ${#PWD} -gt $pwdmaxlen ]
        then
        local pwdoffset=$(( ${#PWD} - $pwdmaxlen ))
        newPWD="${trunc_symbol}${PWD:$pwdoffset:$pwdmaxlen}"
    else
        newPWD=${PWD}
    fi
}

###e PROMPT_COMMAND=prompt_command

### color definitions
# BSD color
# e CLICOLOR=1
# e LSCOLORS="Exfxcxdxbxegedabagacad"
# gnuls color, should use dircolor
# e LS_COLORS="ex=35:di=36:ln=31:*.c=32:*.cpp=32:*.cc=32:*.cxx=32:*.h=33:*.hh=33:*.m=32"

PCOLOR_OFF="\[\033[00m\]"
PCOLOR_BLACK="\[\033[01;30m\]"
PCOLOR_RED="\[\033[01;31m\]"
PCOLOR_GREEN="\[\033[01;32m\]"
PCOLOR_YELLOW="\[\033[01;33m\]"
PCOLOR_BLUE="\[\033[01;34m\]"
PCOLOR_PURPLE="\[\033[01;35m\]"
PCOLOR_CYAN="\[\033[01;36m\]"
PCOLOR_WHITE="\[\033[01;37m\]"
PCOLOR_DEFAULT="\[\033[01;38m\]"

#################################
# Are we root?
#################################
if [ `/usr/bin/whoami` = 'root' ]
then
  e UIDCOLOR=${PCOLOR_RED}
else
  e UIDCOLOR=${PCOLOR_GREEN}
fi
# Do not set PS1 for dumb terminals or emacs
if [ "$TERM" != 'dumb'  ] && [ "$TERM" != 'emacs' ] && [ -n "$BASH" ]
then
    e PS1="${UIDCOLOR}\u@\h:${PCOLOR_CYAN}\W> ${PCOLOR_OFF}"
else
    e PS1="\u@\h:\W> "
fi

#################################
# File Completions tweaks
#################################
FIGNORE=".o:~:.bak:.orig:.bat"

#################################
# Misc Settings
#################################
e EDITOR=vi
[ -f /usr/bin/emacs ] && e EDITOR="/usr/bin/emacs -q"

#################################
# Output commands to set the
# LS_COLORS environment variable.
#################################
[ -f ${HOME}/.dircolors ] && [ -x /usr/bin/dircolors ] && eval `/usr/bin/dircolors ${HOME}/.dircolors`


#################################
# local CVS server
# moved to .bashrc_yahoo
#################################

#################################
# If you use Subversion, uncomment these and change them to reflect your
# Subversion protocol and root. The example below assumes that your
# Subversion root is a local directory, /var/svnroot. For a remote root,
# you might set SVNPROTO to "svn+ssh://" and SVNROOT to
# "svn.mydomain.tld/var/svnroot".
#################################
#e SVNPROTO=file://
#e SVNROOT=/var/svnroot

#################################
# Oracle HOME
#################################
#e ORACLE_BASE="${MOJO_TOOLS}/linux/oracle"
#e ORACLE_HOME="${ORACLE_BASE}/client"

#e DBUSER="tak"
#e DBPASSWORD="tak"

#################################
# LD_LIBRARY_PATH
#################################

#e LD_LIBRARY_PATH="${ORACLE_HOME}/lib"
#e LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/BerkeleyDB.4.2/lib"
#e LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/bdb/lib"
#e LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/openldap/lib"
#e LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/perl/lib"
#e LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"
#e LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/lib"


#################################
# JAVA HOME
#################################

#e JAVA_HOME="/usr/java/jdk1.3.1"
#e JAVA_HOME="/usr/local/jdk1.4.2/jdk"
#e JAVA_HOME="/usr/local/jdk1.5.0_01"
#e JAVA_HOME="/usr/local"

jpath="/usr/local /usr/local/java-1.5.0 /home/y/libexec/jdk1.5.0"
for p in $jpath; do
  if [ -e $p ]; then
#    echo "PATH: $p added";
    e JAVA_HOME=$p
  fi
done
unset jpath p
e JAVA_PATH="${JAVA_HOME}"

#################################
# LDAP
#################################
#e LDAPDIR="${SRC_OPDDIR}/jsrc/jars"

#################################
# PATH Foo
#################################

# bootstrap
e PATH="$HOME/bin"

path=""

# my stuff
path="$path $HOME/s"

# suggested path stuff
path="$path /opt/subversion/bin"
path="$path /bin"
path="$path /sbin"
path="$path /usr/bin"
path="$path /usr/sbin"
path="$path /usr/X11R6/bin"
path="$path /usr/local/bin"
path="$path /usr/local/sbin"
path="$path /opt/local/bin"
path="$path /opt/local/sbin"

path="$path ${ANT_HOME}/bin"
path="$path $JAVA_HOME/bin"
path="$path /usr/local/perl/bin"
path="$path /usr/local/bdb/bin"
path="$path /usr/local/openldap/bin"
path="$path /usr/local/mysql/bin"
path="$path /usr/local/ant/bin"
path="$path /usr/local/git/bin"
path="$path ."

###
### only add stuff to path if it exists
###
for p in $path; do
  if [ -d $p ]; then
#    echo "PATH: $p added";
    e PATH=${PATH}:$p
  fi
done
unset path p

#################################
# CLASSPATH:
#################################

#################################
# start clean
CLASSPATH="."

#################################
# development jar files
# List from least priority to most priority
#jars=""
#jars="$jars $SRC_OPDDIR/jsrc/jars/log4j.jar"
#jars="$jars $MOJO_JAVA/xalan-j_1_2_2/xalan.jar"
#jars="$jars $MOJO_JAVA/jaas1_0/lib/jaas.jar"
#jars="$jars $MOJO_JAVA/ldapjdk/ldapjdk.jar"
#jars="$jars $MOJO_JAVA/xerces-1.2.0/xerces.jar"
#jars="$jars $MOJO_JAVA/xerces-1_3_0/xerces.jar"
#jars="$jars $MOJO_JAVA/soap-2.1x/lib/soap.jar"
#jars="$jars $MOJO_JAVA/oracle_jdbc-8.1.6.0.1/lib/classes12_01.zip"
#jars="$jars $MOJO_JAVA/jndi-1.2.1/lib/jndi.jar"
#jars="$jars $MOJO_JAVA/javamail-1.2/mail.jar"

## Weblogic jars
#wl_jars=""
#wl_jars="$wl_jars $MOJO_JAVA/weblogic6.0/lib/weblogic.jar"
#wl_jars="$wl_jars $MOJO_JAVA/weblogic6.0/lib/weblogic_sp.jar"
## Ant jars
#ant_jars=""
#ant_jars="$ant_jars $MOJO_JAVA/ant-1.2/ant.jar"
#ant_jars="$ant_jars $MOJO_JAVA/ant-1.2/jaxp.jar"
#ant_jars="$ant_jars $MOJO_JAVA/ant-1.2/optional.jar"
#ant_jars="$ant_jars $MOJO_JAVA/ant-1.2/parser.jar"
## JMS jars
#jms_jars=""
#jms_jars="$jms_jars ${JMS_DIR}/jsse.jar"
#jms_jars="$jms_jars ${JMS_DIR}/jnet.jar"
#jms_jars="$jms_jars ${JMS_DIR}/jcert.jar"
#jms_jars="$jms_jars ${JMS_DIR}/swiftmq_ext_mailer.jar"
#jms_jars="$jms_jars ${JMS_DIR}/swiftmq.jar"
#jms_jars="$jms_jars ${JMS_DIR}/jms.jar"
#jms_jars="$jms_jars ${JMS_DIR}/jndi.jar"
## MIF jars
#mif_jars=""
#mif_jars="$mif_jars ${MIF_DIR}/standarddoclet.jar"
#mif_jars="$mif_jars ${MIF_DIR}/mifoutput.jar"
#mif_jars="$mif_jars ${MIF_DIR}/mif.jar"

# Things listed first will be added to end of classpath
#for jar in $mif_jars $jms_jars $ant_jars $wl_jars $jars; do
#for jar in $jars; do
#    echo "JAR: $jar";
#    if [ -f $jar ]; then
#        echo "JAR: $jar added";
#	     CLASSPATH=$jar:$CLASSPATH
#    fi
#done

#unset jar mif_jars jms_jars ant_jars wl_jars jars

#################################
# development classpath dirs

classes=""
classes="$classes ${SRC_OPDDIR}/jsrc"
classes="$classes ${SRC_OPDDIR}/jsrc/classes"
#classes="$classes $HOME/src/log4j/log4j"

for class in $classes; do
#    echo "CLASS = $class"
    if [ -d $class ]; then
	CLASSPATH=$class:$CLASSPATH
#	echo "CLASS = $class added to CLASSPATH"
    fi
done

unset class classes

e CLASSPATH

#############################################################################
# eof
