###############################################
# GIT global config file
#
# lots of stuff found at
#    https://wincent.com/wiki/Git_quickstart
###############################################
[core]
	excludesfile = /Users/mtakacs/.gitignore_global
	legacyheaders = false
	usedeltabaseoffset = true
	autocrlf = input
	quotepath = off
##
## The user.email value below forces you to run: git config user.email="foo@example.com"
##
[user]
	email = mtakacs@apple.com
	name = Tak
	signingkey = 178D6D7FF65FD4CA
[log]
	decorate = short
[color]
	ui = true
	interactive = auto
[page]
	status = true
	show-branch = true
[alias]
	st = status
	stat = status -s
	ci = commit
	co = checkout
    cp = cherry-pick
	staged = diff --cached
	oneline = log --oneline
	amend = commit --amend
	branches = branch -av
	unstage = reset HEAD --
	last = log --oneline -n 1
	dirty = branch --no-merged
    relnotes = shortlog --no-merges v1.0.9...HEAD
    history = log --follow
    hist = log --oneline --graph --decorate --all
    # based on: https://gist.github.com/intel352/9761288
    show-closest-branch = rev-parse --abbrev-ref HEAD
    # based on: http://stackoverflow.com/questions/3161204/find-the-parent-branch-of-a-git-branch
    show-closest-parent-branch = !"git show-branch -a --no-color 2> /dev/null | awk -F '[]^~[]' -v current_branch=`git show-closest-branch 2> /dev/null || true` 'BEGIN { rc=1 ; if ( length( current_branch ) == 0 ) { exit } } ( ( index( $1, \"*\" ) > 0 ) && ( length( $2 ) > 0 ) && ( $2 != current_branch ) ) { print $2 ; rc=0 ; exit } END { exit rc }'"
    # short versions
    cb = !git show-closest-branch
    pb = !git show-closest-parent-branch
    extract-submodules = "!gitextractsubmodules() { set -e && { if [ 0 -lt \"$#\" ]; then printf \"%s\\n\" \"$@\"; else git ls-files --stage | sed -n \"s/^160000 [a-fA-F0-9]\\+ [0-9]\\+\\s*//p\"; fi; } | { local path && while read -r path; do if [ -f \"${path}/.git\" ]; then local git_dir && git_dir=\"$(git -C \"${path}\" rev-parse --absolute-git-dir)\" && if [ -d \"${git_dir}\" ]; then printf \"%s\t%s\n\" \"${git_dir}\" \"${path}/.git\" && mv --no-target-directory --backup=simple -- \"${git_dir}\" \"${path}/.git\" && git --work-tree=\"${path}\" --git-dir=\"${path}/.git\" config --local --path --unset core.worktree && rm -f -- \"${path}/.git~\" && if 1>&- command -v attrib.exe; then MSYS2_ARG_CONV_EXCL=\"*\" attrib.exe \"+H\" \"/D\" \"${path}/.git\"; fi; fi; fi; done; }; } && type gitextractsubmodules"

[merge]
	tool = opendiff
[github]
	user = mtakacs
	token = 5b253a2d988faf8a9958fa24e739b35
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[push]
	default = simple
	followTags = true
[credential]
	helper = osxkeychain
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[fetch]
	prune = true
[status]
	submoduleSummary = true
[diff]
	submodule = log
[pull]
	rebase = false
